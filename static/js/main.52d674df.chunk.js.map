{"version":3,"sources":["actions/AppActions.js","store/AppStore.js","components/PokemonComponent.js","components/PokemonContainer.js","App.js","serviceWorker.js","index.js"],"names":["Action","require","createActions","Reflux","Pokedex","AppStore","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pokeData","loadingPokeData","prevURL","previousURL","nextURL","listenables","P","interval","limit","InitDataSetRequest","UserLoadPokemons","_this2","getPokemonsList","cb","alert","APICallToSetData","obj","_this3","PokemonQuery","results","then","data","setState","updateData","previous","next","catch","error","console","log","queries","_this4","Promise","all","map","query","getPokemonByName","name","response","url","_this5","resource","new_state","assign","emptyPokeData","id","sprites","front_default","Store","PokemonComponent","props","imageLoaded","imageStatus","undefined","String","toUpperCase","val","react_default","a","createElement","className","getPokeName","getPokeId","setImageClass","onLoad","handleImageLoaded","bind","onError","handleImageErrored","src","image_url","alt","React","Component","PokemonContainer","store","item","key","PokemonComponent_PokemonComponent","btnLink","getPokemonComponents","onClick","e","prev","setBtnClass","disabled","setBtnState","App","components_PokemonContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52d674df.chunk.js","sourcesContent":["var Reflux = require(\"reflux\");\r\n\r\nvar Action = Reflux.createActions([\"prev\", \"next\"]);\r\n\r\nexport { Action };\r\n","import { Action } from \"../actions/AppActions\";\r\n\r\nvar Reflux = require(\"reflux\");\r\nvar Pokedex = require(\"pokedex-promise-v2\");\r\n\r\nclass AppStore extends Reflux.Store {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      pokeData: this.loadingPokeData().pokeData,\r\n      prevURL: this.loadingPokeData().previousURL,\r\n      nextURL: this.loadingPokeData().nextURL\r\n    };\r\n    this.listenables = [Action];\r\n\r\n    //.. init the pokedex\r\n    this.P = new Pokedex();\r\n    this.interval = {\r\n      limit: 2\r\n    };\r\n    /*timeout: 2000*/\r\n\r\n    //.. load the uri for pokemons to load\r\n    this.InitDataSetRequest();\r\n  }\r\n\r\n  /** Action Event callbacks */\r\n  onPrev() {\r\n    this.UserLoadPokemons(this.state.prevURL);\r\n  }\r\n\r\n  onNext() {\r\n    this.UserLoadPokemons(this.state.nextURL);\r\n  }\r\n\r\n  /** Utility functions and helpers */\r\n\r\n  //.. initial api call to load data\r\n  InitDataSetRequest() {\r\n    this.P.getPokemonsList(this.interval, cb => {\r\n      //console.log(\"results \", cb.results);\r\n      if (cb === \"Pokedex-promise-v2 error\") {\r\n        alert(\"Pokedex-promise-v2 error\");\r\n      } else {\r\n        //.. subsequent calls to load pokemons\r\n        this.APICallToSetData(cb);\r\n      }\r\n      //return cb\r\n    });\r\n  }\r\n\r\n  //.. call to api and set the states\r\n  APICallToSetData(obj) {\r\n    this.PokemonQuery(obj.results)\r\n      .then(data => {\r\n        //console.log(\"-> \", obj.previous, obj.next, data);\r\n        this.setState(this.updateData(obj.previous, obj.next, data));\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  PokemonQuery(queries) {\r\n    /* wrapping all request here */\r\n    return Promise.all(\r\n      queries.map(query => {\r\n        return this.P.getPokemonByName(query.name).then(response => {\r\n          // TODO: check for individual error incase, otherwise handled by the integrated call\r\n          return response;\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  UserLoadPokemons(url) {\r\n    //.. start the loading and set the\r\n    this.setState(\r\n      this.updateData(\r\n        this.loadingPokeData().previousURL,\r\n        this.loadingPokeData().nextURL,\r\n        this.loadingPokeData().pokeData\r\n      )\r\n    );\r\n\r\n    this.P.resource(url).then(response => {\r\n      this.APICallToSetData(response);\r\n    });\r\n  }\r\n\r\n  updateData(previousURL, nextURL, data) {\r\n    let new_state = Object.assign({}, this.state);\r\n    new_state.pokeData = data;\r\n    new_state.prevURL = previousURL;\r\n    new_state.nextURL = nextURL;\r\n    return new_state;\r\n  }\r\n\r\n  //.. pokedata for loading visual\r\n  loadingPokeData() {\r\n    let emptyPokeData = {\r\n      id: null,\r\n      name: \"\",\r\n      sprites: {\r\n        front_default: \"./loading.gif\"\r\n      }\r\n    };\r\n\r\n    return {\r\n      pokeData: [emptyPokeData, emptyPokeData, emptyPokeData],\r\n      previousURL: null,\r\n      nextURL: null\r\n    };\r\n  }\r\n}\r\n\r\n//AppStore.id = \"test\";\r\nexport default AppStore;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class PokemonComponent extends React.Component {\r\n  static propTypes = {\r\n    image_url: PropTypes.string,\r\n    name: PropTypes.string,\r\n    id: PropTypes.number\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { imageLoaded: false, imageStatus: \"Loading...\" };\r\n  }\r\n\r\n  getPokeId(id) {\r\n    //.. Check for null and Cast to String\r\n    return (this.state.imageLoaded) ? ((id === null || id === undefined) ? \"\" : String(id)) : \"\";\r\n  }\r\n\r\n  getPokeName(name) {\r\n    //.. filter to uppercase\r\n    return (this.state.imageLoaded) ? String(name).toUpperCase() : \"\";\r\n  }\r\n\r\n  setImageClass(val) {\r\n    return val ? \"image-show\" : \"image-hide\";\r\n  }\r\n\r\n  handleImageLoaded() {\r\n    //.. loader image hidden on image loaded\r\n    this.setState({ imageLoaded: true, imageStatus: \"Loaded\" });\r\n  }\r\n\r\n  handleImageErrored() {\r\n    this.setState({ imageLoaded: false, imageStatus: \"Failed to load image\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card-cont\">\r\n        <div className=\"row card-title-cont\">\r\n          <div className=\"col-12\">\r\n            <div className=\"float-left\">\r\n              {this.getPokeName(this.props.name)}\r\n            </div>\r\n            <div className=\"float-right\">{this.getPokeId(this.props.id)}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row no-gutters\">\r\n          <div className=\"col-12\">\r\n            <div className=\"card-img-cont\">\r\n              <img\r\n                className={this.setImageClass(this.state.imageLoaded)}\r\n                onLoad={this.handleImageLoaded.bind(this)}\r\n                onError={this.handleImageErrored.bind(this)}\r\n                src={this.props.image_url}\r\n                alt=\"image pokemon\"\r\n              />\r\n              <img\r\n                className={this.setImageClass(!this.state.imageLoaded)}\r\n                src=\"./loading.gif\"\r\n                alt=\"image loader\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Action } from \"../actions/AppActions\";\r\nimport AppStore from \"../store/AppStore\";\r\nimport PokemonComponent from \"./PokemonComponent\";\r\n\r\nvar Reflux = require(\"reflux\");\r\n\r\nclass PokemonContainer extends Reflux.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.store = AppStore;\r\n  }\r\n\r\n  getPokemonComponents() {\r\n    //console.log(this.state.pokeData);\r\n\r\n    return this.state.pokeData.map((item, id) => {\r\n      return (\r\n        <div className=\"col-sm-4 col-12\" key={item.name + \"-\" + id}>\r\n          <PokemonComponent\r\n            image_url={item.sprites.front_default}\r\n            name={item.name}\r\n            id={item.id}\r\n          />\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  setBtnClass(btnLink) {\r\n    return this.state[btnLink] === null ? \"btn-grey\" : \"btn-green\";\r\n  }\r\n\r\n  setBtnState(btnLink) {\r\n    return this.state[btnLink] === null ? true : false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row mt-4\">{this.getPokemonComponents()}</div>\r\n\r\n        <div className=\"row mt-1\">\r\n          <div className=\"col-6\">\r\n            <div className=\"float-left\">\r\n              <button\r\n                onClick={e => Action.prev()}\r\n                className={this.setBtnClass(\"prevURL\")}\r\n                disabled={this.setBtnState(\"prevURL\")}\r\n              >\r\n                Prev\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-6\">\r\n            <div className=\"float-right\">\r\n              <button\r\n                onClick={e => Action.next()}\r\n                className={this.setBtnClass(\"nextURL\")}\r\n                disabled={this.setBtnState(\"nextURL\")}\r\n              >\r\n                Next\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PokemonContainer;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport PokemonContainer from \"./components/PokemonContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PokemonContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}